// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// PsiFPOP_cpp
List PsiFPOP_cpp(std::vector<double> y, double beta, double alpha, std::string sampling_method, int sampling_method_parameter, std::vector<double> wt);
RcppExport SEXP _PsiFPOP_PsiFPOP_cpp(SEXP ySEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP sampling_methodSEXP, SEXP sampling_method_parameterSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type sampling_method(sampling_methodSEXP);
    Rcpp::traits::input_parameter< int >::type sampling_method_parameter(sampling_method_parameterSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(PsiFPOP_cpp(y, beta, alpha, sampling_method, sampling_method_parameter, wt));
    return rcpp_result_gen;
END_RCPP
}
// PsiOP_cpp
List PsiOP_cpp(std::vector<double> y, double beta, double alpha, std::vector<double> wt);
RcppExport SEXP _PsiFPOP_PsiOP_cpp(SEXP ySEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(PsiOP_cpp(y, beta, alpha, wt));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PsiFPOP_PsiFPOP_cpp", (DL_FUNC) &_PsiFPOP_PsiFPOP_cpp, 6},
    {"_PsiFPOP_PsiOP_cpp", (DL_FUNC) &_PsiFPOP_PsiOP_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_PsiFPOP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
